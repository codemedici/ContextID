name: CI/CD
# GitHub Actions workflow to build Docker images and deploy Terraform-managed infrastructure

on:
  push:
    branches: [main] # Only run on pushes to main to keep infra stable
  workflow_dispatch: # Allow manual runs from the Actions tab

env:
  # AWS region used for both ECR and Terraform operations
  AWS_REGION: us-east-1
  # AWS account ID that hosts the ECR repositories
  ECR_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  build-images:
    runs-on: ubuntu-latest
    # Need OIDC token to assume AWS role without longâ€‘lived credentials
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
        # Configure temporary AWS credentials via GitHub OIDC and STS assume-role
      - name: Configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_PUSH_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push privileged LLM image
        run: |
          # Tag image with latest; consider also tagging with $GITHUB_SHA for immutability
          IMAGE_URI=${{ env.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/privileged-llm:latest
          docker build -t $IMAGE_URI apps/privileged-llm
          docker push $IMAGE_URI
      - name: Build and push quarantined LLM image
        run: |
          IMAGE_URI=${{ env.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/quarantined-llm:latest
          docker build -t $IMAGE_URI apps/quarantined-llm
          docker push $IMAGE_URI

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: build-images
    # Same OIDC permissions for Terraform apply
    permissions:
      contents: read
      id-token: write
    concurrency:
      group: terraform # Prevent parallel applies which could corrupt state
      cancel-in-progress: true
    strategy:
      matrix:
        environment: [dev, prod] # Iterate over dev and prod roots
    env:
      ENVIRONMENT: ${{ matrix.environment }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - name: Configure AWS credentials for Terraform
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TERRAFORM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Terraform fmt
        run: terraform -chdir=infrastructure/environments/${{ env.ENVIRONMENT }} fmt -recursive
      - name: Terraform init
        run: terraform -chdir=infrastructure/environments/${{ env.ENVIRONMENT }} init
      - name: Terraform validate
        run: terraform -chdir=infrastructure/environments/${{ env.ENVIRONMENT }} validate
      - name: Terraform plan
        run: terraform -chdir=infrastructure/environments/${{ env.ENVIRONMENT }} plan -out plan.out
      - name: Terraform apply
        run: terraform -chdir=infrastructure/environments/${{ env.ENVIRONMENT }} apply -auto-approve plan.out
